/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";

export interface DividendTokenInterface extends utils.Interface {
  functions: {
    "ExcludedBalances(address)": FunctionFragment;
    "ExcludedFromFees(address)": FunctionFragment;
    "ExcludedFromReflection(address)": FunctionFragment;
    "ReflectTokens(uint256)": FunctionFragment;
    "RescueTokens(address)": FunctionFragment;
    "SetMarketingWallet(address)": FunctionFragment;
    "SetMaxWallet(uint256)": FunctionFragment;
    "Shares(address)": FunctionFragment;
    "SharesFromTokens(uint256)": FunctionFragment;
    "TokensFromShares(uint256)": FunctionFragment;
    "_isMarketMaker(address)": FunctionFragment;
    "_isMaxWalletExempt(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getInfo()": FunctionFragment;
    "getTaxes()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "marketingWallet()": FunctionFragment;
    "maxWallet()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAMM(address,bool)": FunctionFragment;
    "setExcludedFromFee(address,bool)": FunctionFragment;
    "setExcludedFromReflection(address,bool)": FunctionFragment;
    "setManualSwap(bool)": FunctionFragment;
    "setMaxWalletExempt(address,bool)": FunctionFragment;
    "setSwapTreshold(uint256)": FunctionFragment;
    "setTaxes(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "swapContractToken()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ExcludedBalances"
      | "ExcludedFromFees"
      | "ExcludedFromReflection"
      | "ReflectTokens"
      | "RescueTokens"
      | "SetMarketingWallet"
      | "SetMaxWallet"
      | "Shares"
      | "SharesFromTokens"
      | "TokensFromShares"
      | "_isMarketMaker"
      | "_isMaxWalletExempt"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "burn"
      | "burnFrom"
      | "decimals"
      | "decreaseAllowance"
      | "getInfo"
      | "getTaxes"
      | "increaseAllowance"
      | "marketingWallet"
      | "maxWallet"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "setAMM"
      | "setExcludedFromFee"
      | "setExcludedFromReflection"
      | "setManualSwap"
      | "setMaxWalletExempt"
      | "setSwapTreshold"
      | "setTaxes"
      | "swapContractToken"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ExcludedBalances", values: [string]): string;
  encodeFunctionData(functionFragment: "ExcludedFromFees", values: [string]): string;
  encodeFunctionData(functionFragment: "ExcludedFromReflection", values: [string]): string;
  encodeFunctionData(functionFragment: "ReflectTokens", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "RescueTokens", values: [string]): string;
  encodeFunctionData(functionFragment: "SetMarketingWallet", values: [string]): string;
  encodeFunctionData(functionFragment: "SetMaxWallet", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "Shares", values: [string]): string;
  encodeFunctionData(functionFragment: "SharesFromTokens", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "TokensFromShares", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "_isMarketMaker", values: [string]): string;
  encodeFunctionData(functionFragment: "_isMaxWalletExempt", values: [string]): string;
  encodeFunctionData(functionFragment: "allowance", values: [string, string]): string;
  encodeFunctionData(functionFragment: "approve", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "burnFrom", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "decreaseAllowance", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "getInfo", values?: undefined): string;
  encodeFunctionData(functionFragment: "getTaxes", values?: undefined): string;
  encodeFunctionData(functionFragment: "increaseAllowance", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "marketingWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxWallet", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "setAMM", values: [string, boolean]): string;
  encodeFunctionData(functionFragment: "setExcludedFromFee", values: [string, boolean]): string;
  encodeFunctionData(functionFragment: "setExcludedFromReflection", values: [string, boolean]): string;
  encodeFunctionData(functionFragment: "setManualSwap", values: [boolean]): string;
  encodeFunctionData(functionFragment: "setMaxWalletExempt", values: [string, boolean]): string;
  encodeFunctionData(functionFragment: "setSwapTreshold", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "setTaxes",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swapContractToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "totalSupply", values?: undefined): string;
  encodeFunctionData(functionFragment: "transfer", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "transferFrom", values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;

  decodeFunctionResult(functionFragment: "ExcludedBalances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ExcludedFromFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ExcludedFromReflection", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ReflectTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "RescueTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SetMarketingWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SetMaxWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Shares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "SharesFromTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TokensFromShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_isMarketMaker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_isMaxWalletExempt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decreaseAllowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTaxes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "increaseAllowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketingWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAMM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setExcludedFromFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setExcludedFromReflection", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setManualSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMaxWalletExempt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setSwapTreshold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTaxes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapContractToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalSupply", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OnProlongLPLock(uint256)": EventFragment;
    "OnReleaseLP()": EventFragment;
    "OnSetAMM(address,bool)": EventFragment;
    "OnSetExcludedFromFee(address,bool)": EventFragment;
    "OnSetExcludedFromReflection(address,bool)": EventFragment;
    "OnSetMarketingWallet(address)": EventFragment;
    "OnSetMaxWallet(uint256)": EventFragment;
    "OnSetMaxWalletExempt(address,bool)": EventFragment;
    "OnSetSwapTreshold(uint256)": EventFragment;
    "OnSetTaxes(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "onSetManualSwap(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnProlongLPLock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnReleaseLP"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSetAMM"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSetExcludedFromFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSetExcludedFromReflection"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSetMarketingWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSetMaxWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSetMaxWalletExempt"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSetSwapTreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnSetTaxes"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "onSetManualSwap"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface OnProlongLPLockEventObject {
  UnlockTimestamp: BigNumber;
}
export type OnProlongLPLockEvent = TypedEvent<[BigNumber], OnProlongLPLockEventObject>;

export type OnProlongLPLockEventFilter = TypedEventFilter<OnProlongLPLockEvent>;

export interface OnReleaseLPEventObject {}
export type OnReleaseLPEvent = TypedEvent<[], OnReleaseLPEventObject>;

export type OnReleaseLPEventFilter = TypedEventFilter<OnReleaseLPEvent>;

export interface OnSetAMMEventObject {
  AMM: string;
  add: boolean;
}
export type OnSetAMMEvent = TypedEvent<[string, boolean], OnSetAMMEventObject>;

export type OnSetAMMEventFilter = TypedEventFilter<OnSetAMMEvent>;

export interface OnSetExcludedFromFeeEventObject {
  account: string;
  exclude: boolean;
}
export type OnSetExcludedFromFeeEvent = TypedEvent<[string, boolean], OnSetExcludedFromFeeEventObject>;

export type OnSetExcludedFromFeeEventFilter = TypedEventFilter<OnSetExcludedFromFeeEvent>;

export interface OnSetExcludedFromReflectionEventObject {
  account: string;
  exclude: boolean;
}
export type OnSetExcludedFromReflectionEvent = TypedEvent<[string, boolean], OnSetExcludedFromReflectionEventObject>;

export type OnSetExcludedFromReflectionEventFilter = TypedEventFilter<OnSetExcludedFromReflectionEvent>;

export interface OnSetMarketingWalletEventObject {
  wallet: string;
}
export type OnSetMarketingWalletEvent = TypedEvent<[string], OnSetMarketingWalletEventObject>;

export type OnSetMarketingWalletEventFilter = TypedEventFilter<OnSetMarketingWalletEvent>;

export interface OnSetMaxWalletEventObject {
  _maxWallet: BigNumber;
}
export type OnSetMaxWalletEvent = TypedEvent<[BigNumber], OnSetMaxWalletEventObject>;

export type OnSetMaxWalletEventFilter = TypedEventFilter<OnSetMaxWalletEvent>;

export interface OnSetMaxWalletExemptEventObject {
  wallet: string;
  exempt: boolean;
}
export type OnSetMaxWalletExemptEvent = TypedEvent<[string, boolean], OnSetMaxWalletExemptEventObject>;

export type OnSetMaxWalletExemptEventFilter = TypedEventFilter<OnSetMaxWalletExemptEvent>;

export interface OnSetSwapTresholdEventObject {
  treshold: BigNumber;
}
export type OnSetSwapTresholdEvent = TypedEvent<[BigNumber], OnSetSwapTresholdEventObject>;

export type OnSetSwapTresholdEventFilter = TypedEventFilter<OnSetSwapTresholdEvent>;

export interface OnSetTaxesEventObject {
  Buy: BigNumber;
  Sell: BigNumber;
  Transfer: BigNumber;
  Reflection: BigNumber;
  Liquidity: BigNumber;
  Marketing: BigNumber;
}
export type OnSetTaxesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  OnSetTaxesEventObject
>;

export type OnSetTaxesEventFilter = TypedEventFilter<OnSetTaxesEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface onSetManualSwapEventObject {
  manual: boolean;
}
export type onSetManualSwapEvent = TypedEvent<[boolean], onSetManualSwapEventObject>;

export type onSetManualSwapEventFilter = TypedEventFilter<onSetManualSwapEvent>;

export interface DividendToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DividendTokenInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ExcludedBalances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    ExcludedFromFees(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    ExcludedFromReflection(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    ReflectTokens(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    RescueTokens(token: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    SetMarketingWallet(
      newMarketingWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    SetMaxWallet(_maxWallet: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    Shares(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    SharesFromTokens(tokens: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    TokensFromShares(shares: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    _isMarketMaker(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    _isMaxWalletExempt(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    allowance(_owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getInfo(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        SwapTreshold: BigNumber;
        TotalShares: BigNumber;
        TotalExcluded: BigNumber;
        ManualSwap: boolean;
      }
    >;

    getTaxes(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        Buy: BigNumber;
        Sell: BigNumber;
        Transfer: BigNumber;
        Reflection: BigNumber;
        LP: BigNumber;
        Marketing: BigNumber;
      }
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    marketingWallet(overrides?: CallOverrides): Promise<[string]>;

    maxWallet(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    setAMM(AMM: string, add: boolean, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    setExcludedFromFee(
      account: string,
      exclude: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setExcludedFromReflection(
      account: string,
      exclude: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setManualSwap(manual: boolean, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    setMaxWalletExempt(
      wallet: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSwapTreshold(treshold: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    setTaxes(
      Buy: BigNumberish,
      Sell: BigNumberish,
      Transfer: BigNumberish,
      Reflection: BigNumberish,
      Liquidity: BigNumberish,
      Marketing: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swapContractToken(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;
  };

  ExcludedBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  ExcludedFromFees(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  ExcludedFromReflection(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  ReflectTokens(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  RescueTokens(token: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  SetMarketingWallet(
    newMarketingWallet: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  SetMaxWallet(_maxWallet: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  Shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  SharesFromTokens(tokens: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  TokensFromShares(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  _isMarketMaker(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  _isMaxWalletExempt(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  allowance(_owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getInfo(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      SwapTreshold: BigNumber;
      TotalShares: BigNumber;
      TotalExcluded: BigNumber;
      ManualSwap: boolean;
    }
  >;

  getTaxes(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      Buy: BigNumber;
      Sell: BigNumber;
      Transfer: BigNumber;
      Reflection: BigNumber;
      LP: BigNumber;
      Marketing: BigNumber;
    }
  >;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  marketingWallet(overrides?: CallOverrides): Promise<string>;

  maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setAMM(AMM: string, add: boolean, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setExcludedFromFee(
    account: string,
    exclude: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setExcludedFromReflection(
    account: string,
    exclude: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setManualSwap(manual: boolean, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setMaxWalletExempt(
    wallet: string,
    exempt: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSwapTreshold(treshold: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setTaxes(
    Buy: BigNumberish,
    Sell: BigNumberish,
    Transfer: BigNumberish,
    Reflection: BigNumberish,
    Liquidity: BigNumberish,
    Marketing: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swapContractToken(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  callStatic: {
    ExcludedBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ExcludedFromFees(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    ExcludedFromReflection(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    ReflectTokens(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    RescueTokens(token: string, overrides?: CallOverrides): Promise<void>;

    SetMarketingWallet(newMarketingWallet: string, overrides?: CallOverrides): Promise<void>;

    SetMaxWallet(_maxWallet: BigNumberish, overrides?: CallOverrides): Promise<void>;

    Shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    SharesFromTokens(tokens: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    TokensFromShares(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _isMarketMaker(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    _isMaxWalletExempt(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    allowance(_owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnFrom(account: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(spender: string, subtractedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    getInfo(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        SwapTreshold: BigNumber;
        TotalShares: BigNumber;
        TotalExcluded: BigNumber;
        ManualSwap: boolean;
      }
    >;

    getTaxes(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        Buy: BigNumber;
        Sell: BigNumber;
        Transfer: BigNumber;
        Reflection: BigNumber;
        LP: BigNumber;
        Marketing: BigNumber;
      }
    >;

    increaseAllowance(spender: string, addedValue: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    marketingWallet(overrides?: CallOverrides): Promise<string>;

    maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAMM(AMM: string, add: boolean, overrides?: CallOverrides): Promise<void>;

    setExcludedFromFee(account: string, exclude: boolean, overrides?: CallOverrides): Promise<void>;

    setExcludedFromReflection(account: string, exclude: boolean, overrides?: CallOverrides): Promise<void>;

    setManualSwap(manual: boolean, overrides?: CallOverrides): Promise<void>;

    setMaxWalletExempt(wallet: string, exempt: boolean, overrides?: CallOverrides): Promise<void>;

    setSwapTreshold(treshold: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setTaxes(
      Buy: BigNumberish,
      Sell: BigNumberish,
      Transfer: BigNumberish,
      Reflection: BigNumberish,
      Liquidity: BigNumberish,
      Marketing: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapContractToken(overrides?: CallOverrides): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(owner?: string | null, spender?: string | null, value?: null): ApprovalEventFilter;

    "OnProlongLPLock(uint256)"(UnlockTimestamp?: null): OnProlongLPLockEventFilter;
    OnProlongLPLock(UnlockTimestamp?: null): OnProlongLPLockEventFilter;

    "OnReleaseLP()"(): OnReleaseLPEventFilter;
    OnReleaseLP(): OnReleaseLPEventFilter;

    "OnSetAMM(address,bool)"(AMM?: null, add?: null): OnSetAMMEventFilter;
    OnSetAMM(AMM?: null, add?: null): OnSetAMMEventFilter;

    "OnSetExcludedFromFee(address,bool)"(account?: null, exclude?: null): OnSetExcludedFromFeeEventFilter;
    OnSetExcludedFromFee(account?: null, exclude?: null): OnSetExcludedFromFeeEventFilter;

    "OnSetExcludedFromReflection(address,bool)"(account?: null, exclude?: null): OnSetExcludedFromReflectionEventFilter;
    OnSetExcludedFromReflection(account?: null, exclude?: null): OnSetExcludedFromReflectionEventFilter;

    "OnSetMarketingWallet(address)"(wallet?: null): OnSetMarketingWalletEventFilter;
    OnSetMarketingWallet(wallet?: null): OnSetMarketingWalletEventFilter;

    "OnSetMaxWallet(uint256)"(_maxWallet?: null): OnSetMaxWalletEventFilter;
    OnSetMaxWallet(_maxWallet?: null): OnSetMaxWalletEventFilter;

    "OnSetMaxWalletExempt(address,bool)"(wallet?: null, exempt?: null): OnSetMaxWalletExemptEventFilter;
    OnSetMaxWalletExempt(wallet?: null, exempt?: null): OnSetMaxWalletExemptEventFilter;

    "OnSetSwapTreshold(uint256)"(treshold?: null): OnSetSwapTresholdEventFilter;
    OnSetSwapTreshold(treshold?: null): OnSetSwapTresholdEventFilter;

    "OnSetTaxes(uint256,uint256,uint256,uint256,uint256,uint256)"(
      Buy?: null,
      Sell?: null,
      Transfer?: null,
      Reflection?: null,
      Liquidity?: null,
      Marketing?: null
    ): OnSetTaxesEventFilter;
    OnSetTaxes(
      Buy?: null,
      Sell?: null,
      Transfer?: null,
      Reflection?: null,
      Liquidity?: null,
      Marketing?: null
    ): OnSetTaxesEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    "Transfer(address,address,uint256)"(from?: string | null, to?: string | null, value?: null): TransferEventFilter;
    Transfer(from?: string | null, to?: string | null, value?: null): TransferEventFilter;

    "onSetManualSwap(bool)"(manual?: null): onSetManualSwapEventFilter;
    onSetManualSwap(manual?: null): onSetManualSwapEventFilter;
  };

  estimateGas: {
    ExcludedBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ExcludedFromFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ExcludedFromReflection(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    ReflectTokens(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    RescueTokens(token: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    SetMarketingWallet(newMarketingWallet: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    SetMaxWallet(_maxWallet: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    Shares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    SharesFromTokens(tokens: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    TokensFromShares(shares: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _isMarketMaker(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _isMaxWalletExempt(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    allowance(_owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    burnFrom(account: string, amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getTaxes(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    marketingWallet(overrides?: CallOverrides): Promise<BigNumber>;

    maxWallet(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setAMM(AMM: string, add: boolean, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setExcludedFromFee(
      account: string,
      exclude: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setExcludedFromReflection(
      account: string,
      exclude: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setManualSwap(manual: boolean, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setMaxWalletExempt(wallet: string, exempt: boolean, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setSwapTreshold(treshold: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setTaxes(
      Buy: BigNumberish,
      Sell: BigNumberish,
      Transfer: BigNumberish,
      Reflection: BigNumberish,
      Liquidity: BigNumberish,
      Marketing: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swapContractToken(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    ExcludedBalances(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ExcludedFromFees(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ExcludedFromReflection(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ReflectTokens(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    RescueTokens(token: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    SetMarketingWallet(
      newMarketingWallet: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    SetMaxWallet(_maxWallet: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    Shares(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SharesFromTokens(tokens: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TokensFromShares(shares: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _isMarketMaker(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _isMaxWalletExempt(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(_owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(amount: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTaxes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    marketingWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    setAMM(AMM: string, add: boolean, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    setExcludedFromFee(
      account: string,
      exclude: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setExcludedFromReflection(
      account: string,
      exclude: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setManualSwap(manual: boolean, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    setMaxWalletExempt(
      wallet: string,
      exempt: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSwapTreshold(treshold: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    setTaxes(
      Buy: BigNumberish,
      Sell: BigNumberish,
      Transfer: BigNumberish,
      Reflection: BigNumberish,
      Liquidity: BigNumberish,
      Marketing: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swapContractToken(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;
  };
}
