/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";

export interface DividendTokenDeployerInterface extends utils.Interface {
  functions: {
    "changeIceFee(uint256)": FunctionFragment;
    "deploy(string,string,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "iceFee()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokenRegistry()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeIceFee"
      | "deploy"
      | "iceFee"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "tokenRegistry"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "changeIceFee", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "iceFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenRegistry", values?: undefined): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "changeIceFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iceFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenRegistry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "TokenDeployed(address,address,string,string,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface TokenDeployedEventObject {
  token: string;
  creator: string;
  name: string;
  symbol: string;
  buyTax: BigNumber;
  sellTax: BigNumber;
}
export type TokenDeployedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  TokenDeployedEventObject
>;

export type TokenDeployedEventFilter = TypedEventFilter<TokenDeployedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface DividendTokenDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DividendTokenDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeIceFee(_iceFee: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    deploy(
      symbol: string,
      name: string,
      supply: BigNumberish,
      buyTax: BigNumberish,
      sellTax: BigNumberish,
      marketingTax: BigNumberish,
      reflectionTax: BigNumberish,
      liquidityTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    iceFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    tokenRegistry(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;
  };

  changeIceFee(_iceFee: BigNumberish, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  deploy(
    symbol: string,
    name: string,
    supply: BigNumberish,
    buyTax: BigNumberish,
    sellTax: BigNumberish,
    marketingTax: BigNumberish,
    reflectionTax: BigNumberish,
    liquidityTax: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  iceFee(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  tokenRegistry(overrides?: CallOverrides): Promise<string>;

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  callStatic: {
    changeIceFee(_iceFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    deploy(
      symbol: string,
      name: string,
      supply: BigNumberish,
      buyTax: BigNumberish,
      sellTax: BigNumberish,
      marketingTax: BigNumberish,
      reflectionTax: BigNumberish,
      liquidityTax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    iceFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tokenRegistry(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "TokenDeployed(address,address,string,string,uint256,uint256)"(
      token?: string | null,
      creator?: string | null,
      name?: null,
      symbol?: null,
      buyTax?: null,
      sellTax?: null
    ): TokenDeployedEventFilter;
    TokenDeployed(
      token?: string | null,
      creator?: string | null,
      name?: null,
      symbol?: null,
      buyTax?: null,
      sellTax?: null
    ): TokenDeployedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    changeIceFee(_iceFee: BigNumberish, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    deploy(
      symbol: string,
      name: string,
      supply: BigNumberish,
      buyTax: BigNumberish,
      sellTax: BigNumberish,
      marketingTax: BigNumberish,
      reflectionTax: BigNumberish,
      liquidityTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    iceFee(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    tokenRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    changeIceFee(_iceFee: BigNumberish, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    deploy(
      symbol: string,
      name: string,
      supply: BigNumberish,
      buyTax: BigNumberish,
      sellTax: BigNumberish,
      marketingTax: BigNumberish,
      reflectionTax: BigNumberish,
      liquidityTax: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    iceFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    tokenRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;
  };
}
