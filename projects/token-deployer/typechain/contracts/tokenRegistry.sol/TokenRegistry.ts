/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common";

export interface TokenRegistryInterface extends utils.Interface {
  functions: {
    "allTokens(uint256)": FunctionFragment;
    "changeDexRouter(address)": FunctionFragment;
    "changeFeeReceiver(address)": FunctionFragment;
    "changeIceToken(address)": FunctionFragment;
    "dexRouter()": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "getDeployerTokenType(address)": FunctionFragment;
    "getTokenCreator(address)": FunctionFragment;
    "getTokenType(address)": FunctionFragment;
    "getTokensByCreator(address,uint256)": FunctionFragment;
    "ice()": FunctionFragment;
    "isDeployerRegistered(address)": FunctionFragment;
    "isTokenRegistered(address)": FunctionFragment;
    "manualRegisterToken(address,address,address)": FunctionFragment;
    "numTokensByCreator(address)": FunctionFragment;
    "numTokensCreated()": FunctionFragment;
    "owner()": FunctionFragment;
    "registerToken(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTokenDeployer(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allTokens"
      | "changeDexRouter"
      | "changeFeeReceiver"
      | "changeIceToken"
      | "dexRouter"
      | "feeReceiver"
      | "getDeployerTokenType"
      | "getTokenCreator"
      | "getTokenType"
      | "getTokensByCreator"
      | "ice"
      | "isDeployerRegistered"
      | "isTokenRegistered"
      | "manualRegisterToken"
      | "numTokensByCreator"
      | "numTokensCreated"
      | "owner"
      | "registerToken"
      | "renounceOwnership"
      | "setTokenDeployer"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "allTokens", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "changeDexRouter", values: [string]): string;
  encodeFunctionData(functionFragment: "changeFeeReceiver", values: [string]): string;
  encodeFunctionData(functionFragment: "changeIceToken", values: [string]): string;
  encodeFunctionData(functionFragment: "dexRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeReceiver", values?: undefined): string;
  encodeFunctionData(functionFragment: "getDeployerTokenType", values: [string]): string;
  encodeFunctionData(functionFragment: "getTokenCreator", values: [string]): string;
  encodeFunctionData(functionFragment: "getTokenType", values: [string]): string;
  encodeFunctionData(functionFragment: "getTokensByCreator", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "ice", values?: undefined): string;
  encodeFunctionData(functionFragment: "isDeployerRegistered", values: [string]): string;
  encodeFunctionData(functionFragment: "isTokenRegistered", values: [string]): string;
  encodeFunctionData(functionFragment: "manualRegisterToken", values: [string, string, string]): string;
  encodeFunctionData(functionFragment: "numTokensByCreator", values: [string]): string;
  encodeFunctionData(functionFragment: "numTokensCreated", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "registerToken", values: [string, string]): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "setTokenDeployer", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;

  decodeFunctionResult(functionFragment: "allTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeDexRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeFeeReceiver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "changeIceToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dexRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeReceiver", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDeployerTokenType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokenType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTokensByCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDeployerRegistered", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isTokenRegistered", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manualRegisterToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numTokensByCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numTokensCreated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registerToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTokenDeployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;

  events: {
    "DeployerRegistered(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenRegistered(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRegistered"): EventFragment;
}

export interface DeployerRegisteredEventObject {
  tokenType: BigNumber;
  deployer: string;
}
export type DeployerRegisteredEvent = TypedEvent<[BigNumber, string], DeployerRegisteredEventObject>;

export type DeployerRegisteredEventFilter = TypedEventFilter<DeployerRegisteredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenRegisteredEventObject {
  token: string;
  creator: string;
  tokenType: BigNumber;
}
export type TokenRegisteredEvent = TypedEvent<[string, string, BigNumber], TokenRegisteredEventObject>;

export type TokenRegisteredEventFilter = TypedEventFilter<TokenRegisteredEvent>;

export interface TokenRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    changeDexRouter(_dexRouter: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    changeFeeReceiver(_feeReceiver: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    changeIceToken(_ice: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<[string]>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    getDeployerTokenType(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenCreator(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getTokenType(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokensByCreator(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    ice(overrides?: CallOverrides): Promise<[string]>;

    isDeployerRegistered(deployer: string, overrides?: CallOverrides): Promise<[boolean] & { isRegistered: boolean }>;

    isTokenRegistered(token: string, overrides?: CallOverrides): Promise<[boolean] & { isRegistered: boolean }>;

    manualRegisterToken(
      token: string,
      creator: string,
      deployer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    numTokensByCreator(creator: string, overrides?: CallOverrides): Promise<[BigNumber] & { numTokens: BigNumber }>;

    numTokensCreated(overrides?: CallOverrides): Promise<[BigNumber] & { numTokens: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerToken(
      token: string,
      creator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    setTokenDeployer(
      deployer: string,
      tokenType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;
  };

  allTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  changeDexRouter(_dexRouter: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  changeFeeReceiver(_feeReceiver: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  changeIceToken(_ice: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  dexRouter(overrides?: CallOverrides): Promise<string>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  getDeployerTokenType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTokenCreator(arg0: string, overrides?: CallOverrides): Promise<string>;

  getTokenType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTokensByCreator(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

  ice(overrides?: CallOverrides): Promise<string>;

  isDeployerRegistered(deployer: string, overrides?: CallOverrides): Promise<boolean>;

  isTokenRegistered(token: string, overrides?: CallOverrides): Promise<boolean>;

  manualRegisterToken(
    token: string,
    creator: string,
    deployer: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  numTokensByCreator(creator: string, overrides?: CallOverrides): Promise<BigNumber>;

  numTokensCreated(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerToken(
    token: string,
    creator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  setTokenDeployer(
    deployer: string,
    tokenType: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  callStatic: {
    allTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    changeDexRouter(_dexRouter: string, overrides?: CallOverrides): Promise<void>;

    changeFeeReceiver(_feeReceiver: string, overrides?: CallOverrides): Promise<void>;

    changeIceToken(_ice: string, overrides?: CallOverrides): Promise<void>;

    dexRouter(overrides?: CallOverrides): Promise<string>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    getDeployerTokenType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenCreator(arg0: string, overrides?: CallOverrides): Promise<string>;

    getTokenType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensByCreator(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<string>;

    ice(overrides?: CallOverrides): Promise<string>;

    isDeployerRegistered(deployer: string, overrides?: CallOverrides): Promise<boolean>;

    isTokenRegistered(token: string, overrides?: CallOverrides): Promise<boolean>;

    manualRegisterToken(token: string, creator: string, deployer: string, overrides?: CallOverrides): Promise<void>;

    numTokensByCreator(creator: string, overrides?: CallOverrides): Promise<BigNumber>;

    numTokensCreated(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerToken(token: string, creator: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setTokenDeployer(deployer: string, tokenType: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "DeployerRegistered(uint256,address)"(
      tokenType?: BigNumberish | null,
      deployer?: string | null
    ): DeployerRegisteredEventFilter;
    DeployerRegistered(tokenType?: BigNumberish | null, deployer?: string | null): DeployerRegisteredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(previousOwner?: string | null, newOwner?: string | null): OwnershipTransferredEventFilter;

    "TokenRegistered(address,address,uint256)"(
      token?: string | null,
      creator?: string | null,
      tokenType?: null
    ): TokenRegisteredEventFilter;
    TokenRegistered(token?: string | null, creator?: string | null, tokenType?: null): TokenRegisteredEventFilter;
  };

  estimateGas: {
    allTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    changeDexRouter(_dexRouter: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    changeFeeReceiver(_feeReceiver: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    changeIceToken(_ice: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    dexRouter(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    getDeployerTokenType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenCreator(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokenType(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTokensByCreator(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    ice(overrides?: CallOverrides): Promise<BigNumber>;

    isDeployerRegistered(deployer: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTokenRegistered(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    manualRegisterToken(
      token: string,
      creator: string,
      deployer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    numTokensByCreator(creator: string, overrides?: CallOverrides): Promise<BigNumber>;

    numTokensCreated(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerToken(token: string, creator: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    setTokenDeployer(
      deployer: string,
      tokenType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    allTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeDexRouter(_dexRouter: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    changeFeeReceiver(_feeReceiver: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    changeIceToken(_ice: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    dexRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDeployerTokenType(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenCreator(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenType(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokensByCreator(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDeployerRegistered(deployer: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTokenRegistered(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    manualRegisterToken(
      token: string,
      creator: string,
      deployer: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    numTokensByCreator(creator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numTokensCreated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerToken(
      token: string,
      creator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    setTokenDeployer(
      deployer: string,
      tokenType: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;
  };
}
