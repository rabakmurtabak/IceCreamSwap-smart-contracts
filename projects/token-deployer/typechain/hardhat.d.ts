/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import { FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase } from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "DividendToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DividendToken__factory>;
    getContractFactory(
      name: "DividendTokenDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DividendTokenDeployer__factory>;
    getContractFactory(
      name: "IIceCreamSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIceCreamSwapFactory__factory>;
    getContractFactory(
      name: "IIceCreamSwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIceCreamSwapRouter__factory>;
    getContractFactory(
      name: "ITokenRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokenRegistry__factory>;
    getContractFactory(
      name: "TokenRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TokenRegistry__factory>;

    getContractAt(name: "Ownable", address: string, signer?: ethers.Signer): Promise<Contracts.Ownable>;
    getContractAt(name: "Pausable", address: string, signer?: ethers.Signer): Promise<Contracts.Pausable>;
    getContractAt(name: "IERC20", address: string, signer?: ethers.Signer): Promise<Contracts.IERC20>;
    getContractAt(name: "DividendToken", address: string, signer?: ethers.Signer): Promise<Contracts.DividendToken>;
    getContractAt(
      name: "DividendTokenDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DividendTokenDeployer>;
    getContractAt(
      name: "IIceCreamSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIceCreamSwapFactory>;
    getContractAt(
      name: "IIceCreamSwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIceCreamSwapRouter>;
    getContractAt(name: "ITokenRegistry", address: string, signer?: ethers.Signer): Promise<Contracts.ITokenRegistry>;
    getContractAt(name: "TokenRegistry", address: string, signer?: ethers.Signer): Promise<Contracts.TokenRegistry>;

    // default types
    getContractFactory(name: string, signerOrOptions?: ethers.Signer | FactoryOptions): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(nameOrAbi: string | any[], address: string, signer?: ethers.Signer): Promise<ethers.Contract>;
  }
}
